{"text":"ed25519_dalek::VerifyingKey::from_bytes(&[0u8; 32])\n            .expect(\"Test key creation should not fail\")","range":{"byteOffset":{"start":20511,"end":20619},"start":{"line":593,"column":8},"end":{"line":594,"column":56}},"file":"src/adaptive/som_old.rs","lines":"        ed25519_dalek::VerifyingKey::from_bytes(&[0u8; 32])\n            .expect(\"Test key creation should not fail\")","charCount":{"leading":8,"trailing":0},"language":"Rust","metaVariables":{"single":{"A":{"text":"ed25519_dalek::VerifyingKey::from_bytes(&[0u8; 32])","range":{"byteOffset":{"start":20511,"end":20562},"start":{"line":593,"column":8},"end":{"line":593,"column":59}}},"B":{"text":"\"Test key creation should not fail\"","range":{"byteOffset":{"start":20583,"end":20618},"start":{"line":594,"column":20},"end":{"line":594,"column":55}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":30194,"end":30250},"start":{"line":906,"column":23},"end":{"line":906,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":30216,"end":30249},"start":{"line":906,"column":45},"end":{"line":906,"column":78}}},"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":30194,"end":30208},"start":{"line":906,"column":23},"end":{"line":906,"column":37}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":30344,"end":30456},"start":{"line":909,"column":22},"end":{"line":910,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let manager = EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":30432,"end":30455},"start":{"line":910,"column":20},"end":{"line":910,"column":43}}},"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)","range":{"byteOffset":{"start":30344,"end":30411},"start":{"line":909,"column":22},"end":{"line":909,"column":89}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":30494,"end":30574},"start":{"line":913,"column":12},"end":{"line":913,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\")","range":{"byteOffset":{"start":30494,"end":30542},"start":{"line":913,"column":12},"end":{"line":913,"column":60}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":30550,"end":30573},"start":{"line":913,"column":68},"end":{"line":913,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":30783,"end":30839},"start":{"line":922,"column":23},"end":{"line":922,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":30783,"end":30797},"start":{"line":922,"column":23},"end":{"line":922,"column":37}}},"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":30805,"end":30838},"start":{"line":922,"column":45},"end":{"line":922,"column":78}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":30933,"end":31045},"start":{"line":925,"column":22},"end":{"line":926,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let manager = EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":31021,"end":31044},"start":{"line":926,"column":20},"end":{"line":926,"column":43}}},"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)","range":{"byteOffset":{"start":30933,"end":31000},"start":{"line":925,"column":22},"end":{"line":925,"column":89}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":31083,"end":31163},"start":{"line":929,"column":12},"end":{"line":929,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\")","range":{"byteOffset":{"start":31083,"end":31131},"start":{"line":929,"column":12},"end":{"line":929,"column":60}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":31139,"end":31162},"start":{"line":929,"column":68},"end":{"line":929,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"MasterSeed::generate().expect(\"Test assertion failed\")","range":{"byteOffset":{"start":31278,"end":31332},"start":{"line":933,"column":26},"end":{"line":933,"column":80}},"file":"src/encrypted_key_storage.rs","lines":"        let master_seed = MasterSeed::generate().expect(\"Test assertion failed\");","charCount":{"leading":26,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":31308,"end":31331},"start":{"line":933,"column":56},"end":{"line":933,"column":79}}},"A":{"text":"MasterSeed::generate()","range":{"byteOffset":{"start":31278,"end":31300},"start":{"line":933,"column":26},"end":{"line":933,"column":48}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":31750,"end":31806},"start":{"line":947,"column":23},"end":{"line":947,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":31772,"end":31805},"start":{"line":947,"column":45},"end":{"line":947,"column":78}}},"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":31750,"end":31764},"start":{"line":947,"column":23},"end":{"line":947,"column":37}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Standard)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":31900,"end":32016},"start":{"line":950,"column":22},"end":{"line":951,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let manager = EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Standard)\n            .expect(\"Test assertion failed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Standard)","range":{"byteOffset":{"start":31900,"end":31971},"start":{"line":950,"column":22},"end":{"line":950,"column":93}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":31992,"end":32015},"start":{"line":951,"column":20},"end":{"line":951,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"123\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":32077,"end":32144},"start":{"line":954,"column":28},"end":{"line":954,"column":95}},"file":"src/encrypted_key_storage.rs","lines":"        let weak_password = SecureString::from_plain_str(\"123\").expect(\"Test assertion failed\");","charCount":{"leading":28,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"SecureString::from_plain_str(\"123\")","range":{"byteOffset":{"start":32077,"end":32112},"start":{"line":954,"column":28},"end":{"line":954,"column":63}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":32120,"end":32143},"start":{"line":954,"column":71},"end":{"line":954,"column":94}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .validate_password(&weak_password)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":32171,"end":32270},"start":{"line":955,"column":25},"end":{"line":957,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let validation = manager\n            .validate_password(&weak_password)\n            .expect(\"Test assertion failed\");","charCount":{"leading":25,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"manager\n            .validate_password(&weak_password)","range":{"byteOffset":{"start":32171,"end":32225},"start":{"line":955,"column":25},"end":{"line":956,"column":46}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":32246,"end":32269},"start":{"line":957,"column":20},"end":{"line":957,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#2\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":32431,"end":32511},"start":{"line":963,"column":12},"end":{"line":963,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"G00d-Pa55w0rd_#2\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":32487,"end":32510},"start":{"line":963,"column":68},"end":{"line":963,"column":91}}},"A":{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#2\")","range":{"byteOffset":{"start":32431,"end":32479},"start":{"line":963,"column":12},"end":{"line":963,"column":60}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .validate_password(&strong_password)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":32538,"end":32639},"start":{"line":964,"column":25},"end":{"line":966,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let validation = manager\n            .validate_password(&strong_password)\n            .expect(\"Test assertion failed\");","charCount":{"leading":25,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"manager\n            .validate_password(&strong_password)","range":{"byteOffset":{"start":32538,"end":32594},"start":{"line":964,"column":25},"end":{"line":965,"column":48}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":32615,"end":32638},"start":{"line":966,"column":20},"end":{"line":966,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":32827,"end":32883},"start":{"line":973,"column":23},"end":{"line":973,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":32827,"end":32841},"start":{"line":973,"column":23},"end":{"line":973,"column":37}}},"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":32849,"end":32882},"start":{"line":973,"column":45},"end":{"line":973,"column":78}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":32977,"end":33089},"start":{"line":976,"column":22},"end":{"line":977,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let manager = EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)","range":{"byteOffset":{"start":32977,"end":33044},"start":{"line":976,"column":22},"end":{"line":976,"column":89}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":33065,"end":33088},"start":{"line":977,"column":20},"end":{"line":977,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"Old-G00d-Pa55_#7\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":33131,"end":33211},"start":{"line":980,"column":12},"end":{"line":980,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"Old-G00d-Pa55_#7\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":33187,"end":33210},"start":{"line":980,"column":68},"end":{"line":980,"column":91}}},"A":{"text":"SecureString::from_plain_str(\"Old-G00d-Pa55_#7\")","range":{"byteOffset":{"start":33131,"end":33179},"start":{"line":980,"column":12},"end":{"line":980,"column":60}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"New-G00d-Pa55_#8\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":33252,"end":33332},"start":{"line":982,"column":12},"end":{"line":982,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"New-G00d-Pa55_#8\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":33308,"end":33331},"start":{"line":982,"column":68},"end":{"line":982,"column":91}}},"A":{"text":"SecureString::from_plain_str(\"New-G00d-Pa55_#8\")","range":{"byteOffset":{"start":33252,"end":33300},"start":{"line":982,"column":12},"end":{"line":982,"column":60}}}},"multi":{},"transformed":{}}}
{"text":"MasterSeed::generate().expect(\"Test assertion failed\")","range":{"byteOffset":{"start":33443,"end":33497},"start":{"line":987,"column":26},"end":{"line":987,"column":80}},"file":"src/encrypted_key_storage.rs","lines":"        let master_seed = MasterSeed::generate().expect(\"Test assertion failed\");","charCount":{"leading":26,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"MasterSeed::generate()","range":{"byteOffset":{"start":33443,"end":33465},"start":{"line":987,"column":26},"end":{"line":987,"column":48}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":33473,"end":33496},"start":{"line":987,"column":56},"end":{"line":987,"column":79}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":34401,"end":34457},"start":{"line":1018,"column":23},"end":{"line":1018,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":34401,"end":34415},"start":{"line":1018,"column":23},"end":{"line":1018,"column":37}}},"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":34423,"end":34456},"start":{"line":1018,"column":45},"end":{"line":1018,"column":78}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, level)\n                .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":34753,"end":34855},"start":{"line":1029,"column":26},"end":{"line":1030,"column":48}},"file":"src/encrypted_key_storage.rs","lines":"            let manager = EncryptedKeyStorageManager::new(&storage_path, level)\n                .expect(\"Test assertion failed\");","charCount":{"leading":26,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":34831,"end":34854},"start":{"line":1030,"column":24},"end":{"line":1030,"column":47}}},"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, level)","range":{"byteOffset":{"start":34753,"end":34806},"start":{"line":1029,"column":26},"end":{"line":1029,"column":79}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#3\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":34900,"end":34980},"start":{"line":1032,"column":16},"end":{"line":1032,"column":96}},"file":"src/encrypted_key_storage.rs","lines":"                SecureString::from_plain_str(\"G00d-Pa55w0rd_#3\").expect(\"Test assertion failed\");","charCount":{"leading":16,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":34956,"end":34979},"start":{"line":1032,"column":72},"end":{"line":1032,"column":95}}},"A":{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#3\")","range":{"byteOffset":{"start":34900,"end":34948},"start":{"line":1032,"column":16},"end":{"line":1032,"column":64}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Failed to create temp directory\")","range":{"byteOffset":{"start":35576,"end":35632},"start":{"line":1054,"column":23},"end":{"line":1054,"column":79}},"file":"src/encrypted_key_storage.rs","lines":"        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to create temp directory\"","range":{"byteOffset":{"start":35598,"end":35631},"start":{"line":1054,"column":45},"end":{"line":1054,"column":78}}},"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":35576,"end":35590},"start":{"line":1054,"column":23},"end":{"line":1054,"column":37}}}},"multi":{},"transformed":{}}}
{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\")","range":{"byteOffset":{"start":35726,"end":35838},"start":{"line":1057,"column":22},"end":{"line":1058,"column":44}},"file":"src/encrypted_key_storage.rs","lines":"        let manager = EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)\n            .expect(\"Test assertion failed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"EncryptedKeyStorageManager::new(&storage_path, SecurityLevel::Fast)","range":{"byteOffset":{"start":35726,"end":35793},"start":{"line":1057,"column":22},"end":{"line":1057,"column":89}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":35814,"end":35837},"start":{"line":1058,"column":20},"end":{"line":1058,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\")","range":{"byteOffset":{"start":35876,"end":35956},"start":{"line":1061,"column":12},"end":{"line":1061,"column":92}},"file":"src/encrypted_key_storage.rs","lines":"            SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\").expect(\"Test assertion failed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":35932,"end":35955},"start":{"line":1061,"column":68},"end":{"line":1061,"column":91}}},"A":{"text":"SecureString::from_plain_str(\"G00d-Pa55w0rd_#1\")","range":{"byteOffset":{"start":35876,"end":35924},"start":{"line":1061,"column":12},"end":{"line":1061,"column":60}}}},"multi":{},"transformed":{}}}
{"text":"MasterSeed::generate().expect(\"Test assertion failed\")","range":{"byteOffset":{"start":36060,"end":36114},"start":{"line":1065,"column":26},"end":{"line":1065,"column":80}},"file":"src/encrypted_key_storage.rs","lines":"        let master_seed = MasterSeed::generate().expect(\"Test assertion failed\");","charCount":{"leading":26,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":36090,"end":36113},"start":{"line":1065,"column":56},"end":{"line":1065,"column":79}}},"A":{"text":"MasterSeed::generate()","range":{"byteOffset":{"start":36060,"end":36082},"start":{"line":1065,"column":26},"end":{"line":1065,"column":48}}}},"multi":{},"transformed":{}}}
{"text":"manager.get_stats().expect(\"Test assertion failed\")","range":{"byteOffset":{"start":36796,"end":36847},"start":{"line":1083,"column":20},"end":{"line":1083,"column":71}},"file":"src/encrypted_key_storage.rs","lines":"        let stats = manager.get_stats().expect(\"Test assertion failed\");","charCount":{"leading":20,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"manager.get_stats()","range":{"byteOffset":{"start":36796,"end":36815},"start":{"line":1083,"column":20},"end":{"line":1083,"column":39}}},"B":{"text":"\"Test assertion failed\"","range":{"byteOffset":{"start":36823,"end":36846},"start":{"line":1083,"column":47},"end":{"line":1083,"column":70}}}},"multi":{},"transformed":{}}}
{"text":"shutdown_task.await.expect(\"Task panicked\")","range":{"byteOffset":{"start":37276,"end":37319},"start":{"line":1125,"column":21},"end":{"line":1125,"column":64}},"file":"src/production.rs","lines":"        let result = shutdown_task.await.expect(\"Task panicked\");","charCount":{"leading":21,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"shutdown_task.await","range":{"byteOffset":{"start":37276,"end":37295},"start":{"line":1125,"column":21},"end":{"line":1125,"column":40}}},"B":{"text":"\"Task panicked\"","range":{"byteOffset":{"start":37303,"end":37318},"start":{"line":1125,"column":48},"end":{"line":1125,"column":63}}}},"multi":{},"transformed":{}}}
{"text":"tokio::time::timeout(\n            std::time::Duration::from_secs(2),\n            strategy.find_path(&target_id),\n        )\n        .await\n        .expect(\"find_path timed out\")","range":{"byteOffset":{"start":24153,"end":24329},"start":{"line":728,"column":21},"end":{"line":733,"column":38}},"file":"src/adaptive/trust.rs","lines":"        let result = tokio::time::timeout(\n            std::time::Duration::from_secs(2),\n            strategy.find_path(&target_id),\n        )\n        .await\n        .expect(\"find_path timed out\");","charCount":{"leading":21,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"find_path timed out\"","range":{"byteOffset":{"start":24307,"end":24328},"start":{"line":733,"column":16},"end":{"line":733,"column":37}}},"A":{"text":"tokio::time::timeout(\n            std::time::Duration::from_secs(2),\n            strategy.find_path(&target_id),\n        )\n        .await","range":{"byteOffset":{"start":24153,"end":24290},"start":{"line":728,"column":21},"end":{"line":732,"column":14}}}},"multi":{},"transformed":{}}}
{"text":"\"127.0.0.1:9000\"\n                    .parse::<NetworkAddress>()\n                    .expect(\"Test address should be valid\")","range":{"byteOffset":{"start":23591,"end":23714},"start":{"line":720,"column":28},"end":{"line":722,"column":59}},"file":"src/transport.rs","lines":"                local_addr: \"127.0.0.1:9000\"\n                    .parse::<NetworkAddress>()\n                    .expect(\"Test address should be valid\"),","charCount":{"leading":28,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"\"127.0.0.1:9000\"\n                    .parse::<NetworkAddress>()","range":{"byteOffset":{"start":23591,"end":23654},"start":{"line":720,"column":28},"end":{"line":721,"column":46}}},"B":{"text":"\"Test address should be valid\"","range":{"byteOffset":{"start":23683,"end":23713},"start":{"line":722,"column":28},"end":{"line":722,"column":58}}}},"multi":{},"transformed":{}}}
{"text":"\"127.0.0.1:9000\"\n                .parse::<NetworkAddress>()\n                .expect(\"Test address should be valid\")","range":{"byteOffset":{"start":24651,"end":24766},"start":{"line":752,"column":12},"end":{"line":754,"column":55}},"file":"src/transport.rs","lines":"            \"127.0.0.1:9000\"\n                .parse::<NetworkAddress>()\n                .expect(\"Test address should be valid\")","charCount":{"leading":12,"trailing":0},"language":"Rust","metaVariables":{"single":{"A":{"text":"\"127.0.0.1:9000\"\n                .parse::<NetworkAddress>()","range":{"byteOffset":{"start":24651,"end":24710},"start":{"line":752,"column":12},"end":{"line":753,"column":42}}},"B":{"text":"\"Test address should be valid\"","range":{"byteOffset":{"start":24735,"end":24765},"start":{"line":754,"column":24},"end":{"line":754,"column":54}}}},"multi":{},"transformed":{}}}
{"text":"format!(\"127.0.0.1:{}\", 9020 + i)\n                    .parse()\n                    .expect(\"Test address should be valid\")","range":{"byteOffset":{"start":40969,"end":41091},"start":{"line":1220,"column":16},"end":{"line":1222,"column":59}},"file":"src/transport.rs","lines":"                format!(\"127.0.0.1:{}\", 9020 + i)\n                    .parse()\n                    .expect(\"Test address should be valid\"),","charCount":{"leading":16,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Test address should be valid\"","range":{"byteOffset":{"start":41060,"end":41090},"start":{"line":1222,"column":28},"end":{"line":1222,"column":58}}},"A":{"text":"format!(\"127.0.0.1:{}\", 9020 + i)\n                    .parse()","range":{"byteOffset":{"start":40969,"end":41031},"start":{"line":1220,"column":16},"end":{"line":1221,"column":28}}}},"multi":{},"transformed":{}}}
{"text":"TempDir::new().expect(\"Should create temp directory for test\")","range":{"byteOffset":{"start":11339,"end":11401},"start":{"line":368,"column":23},"end":{"line":368,"column":85}},"file":"src/identity/cli.rs","lines":"        let temp_dir = TempDir::new().expect(\"Should create temp directory for test\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"TempDir::new()","range":{"byteOffset":{"start":11339,"end":11353},"start":{"line":368,"column":23},"end":{"line":368,"column":37}}},"B":{"text":"\"Should create temp directory for test\"","range":{"byteOffset":{"start":11361,"end":11400},"start":{"line":368,"column":45},"end":{"line":368,"column":84}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::generate().expect(\"Should generate identity in test\")","range":{"byteOffset":{"start":11528,"end":11595},"start":{"line":372,"column":23},"end":{"line":372,"column":90}},"file":"src/identity/cli.rs","lines":"        let identity = NodeIdentity::generate().expect(\"Should generate identity in test\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"NodeIdentity::generate()","range":{"byteOffset":{"start":11528,"end":11552},"start":{"line":372,"column":23},"end":{"line":372,"column":47}}},"B":{"text":"\"Should generate identity in test\"","range":{"byteOffset":{"start":11560,"end":11594},"start":{"line":372,"column":55},"end":{"line":372,"column":89}}}},"multi":{},"transformed":{}}}
{"text":"save_identity(&identity, &identity_path).expect(\"Should save identity in test\")","range":{"byteOffset":{"start":11676,"end":11755},"start":{"line":376,"column":8},"end":{"line":376,"column":87}},"file":"src/identity/cli.rs","lines":"        save_identity(&identity, &identity_path).expect(\"Should save identity in test\");","charCount":{"leading":8,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"save_identity(&identity, &identity_path)","range":{"byteOffset":{"start":11676,"end":11716},"start":{"line":376,"column":8},"end":{"line":376,"column":48}}},"B":{"text":"\"Should save identity in test\"","range":{"byteOffset":{"start":11724,"end":11754},"start":{"line":376,"column":56},"end":{"line":376,"column":86}}}},"multi":{},"transformed":{}}}
{"text":"load_identity(&identity_path).expect(\"Should load identity in test\")","range":{"byteOffset":{"start":11795,"end":11863},"start":{"line":379,"column":21},"end":{"line":379,"column":89}},"file":"src/identity/cli.rs","lines":"        let loaded = load_identity(&identity_path).expect(\"Should load identity in test\");","charCount":{"leading":21,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should load identity in test\"","range":{"byteOffset":{"start":11832,"end":11862},"start":{"line":379,"column":58},"end":{"line":379,"column":88}}},"A":{"text":"load_identity(&identity_path)","range":{"byteOffset":{"start":11795,"end":11824},"start":{"line":379,"column":21},"end":{"line":379,"column":50}}}},"multi":{},"transformed":{}}}
{"text":"MonitoringSystem::new_with_registry(\n                crate::adaptive::monitoring::MonitoredComponents {\n                    router: router.clone(),\n                    churn_handler: churn.clone(),\n                    gossip: gossip.clone(),\n                    storage: storage.clone(),\n                    replication: replication.clone(),\n                    thompson: thompson.clone(),\n                    cache: cache.clone(),\n                },\n                crate::adaptive::monitoring::MonitoringConfig::default(),\n                test_registry,\n            )\n            .expect(\"Failed to create monitoring system for tests\")","range":{"byteOffset":{"start":26296,"end":26933},"start":{"line":863,"column":12},"end":{"line":876,"column":67}},"file":"src/adaptive/client.rs","lines":"            MonitoringSystem::new_with_registry(\n                crate::adaptive::monitoring::MonitoredComponents {\n                    router: router.clone(),\n                    churn_handler: churn.clone(),\n                    gossip: gossip.clone(),\n                    storage: storage.clone(),\n                    replication: replication.clone(),\n                    thompson: thompson.clone(),\n                    cache: cache.clone(),\n                },\n                crate::adaptive::monitoring::MonitoringConfig::default(),\n                test_registry,\n            )\n            .expect(\"Failed to create monitoring system for tests\"),","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to create monitoring system for tests\"","range":{"byteOffset":{"start":26886,"end":26932},"start":{"line":876,"column":20},"end":{"line":876,"column":66}}},"A":{"text":"MonitoringSystem::new_with_registry(\n                crate::adaptive::monitoring::MonitoredComponents {\n                    router: router.clone(),\n                    churn_handler: churn.clone(),\n                    gossip: gossip.clone(),\n                    storage: storage.clone(),\n                    replication: replication.clone(),\n                    thompson: thompson.clone(),\n                    cache: cache.clone(),\n                },\n                crate::adaptive::monitoring::MonitoringConfig::default(),\n                test_registry,\n            )","range":{"byteOffset":{"start":26296,"end":26865},"start":{"line":863,"column":12},"end":{"line":875,"column":13}}}},"multi":{},"transformed":{}}}
{"text":"QuicTransport::new(TransportOptions::default())\n            .expect(\"Should create transport\")","range":{"byteOffset":{"start":1099,"end":1193},"start":{"line":27,"column":24},"end":{"line":28,"column":46}},"file":"src/transport/quic_error_tests.rs","lines":"        let transport = QuicTransport::new(TransportOptions::default())\n            .expect(\"Should create transport\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"QuicTransport::new(TransportOptions::default())","range":{"byteOffset":{"start":1099,"end":1146},"start":{"line":27,"column":24},"end":{"line":27,"column":71}}},"B":{"text":"\"Should create transport\"","range":{"byteOffset":{"start":1167,"end":1192},"start":{"line":28,"column":20},"end":{"line":28,"column":45}}}},"multi":{},"transformed":{}}}
{"text":"serde_json::to_string(&config).expect(\"Failed to serialize config\")","range":{"byteOffset":{"start":12714,"end":12781},"start":{"line":395,"column":25},"end":{"line":395,"column":92}},"file":"src/dht/enhanced_storage_test.rs","lines":"        let serialized = serde_json::to_string(&config).expect(\"Failed to serialize config\");","charCount":{"leading":25,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"serde_json::to_string(&config)","range":{"byteOffset":{"start":12714,"end":12744},"start":{"line":395,"column":25},"end":{"line":395,"column":55}}},"B":{"text":"\"Failed to serialize config\"","range":{"byteOffset":{"start":12752,"end":12780},"start":{"line":395,"column":63},"end":{"line":395,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"serde_json::from_str(&serialized)\n            .expect(\"Failed to deserialize config\")","range":{"byteOffset":{"start":12829,"end":12914},"start":{"line":396,"column":46},"end":{"line":397,"column":51}},"file":"src/dht/enhanced_storage_test.rs","lines":"        let deserialized: ReplicationConfig = serde_json::from_str(&serialized)\n            .expect(\"Failed to deserialize config\");","charCount":{"leading":46,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"serde_json::from_str(&serialized)","range":{"byteOffset":{"start":12829,"end":12862},"start":{"line":396,"column":46},"end":{"line":396,"column":79}}},"B":{"text":"\"Failed to deserialize config\"","range":{"byteOffset":{"start":12883,"end":12913},"start":{"line":397,"column":20},"end":{"line":397,"column":50}}}},"multi":{},"transformed":{}}}
{"text":"FourWordAddress::from_node_id(&node_id).expect(\"Should create address from node ID\")","range":{"byteOffset":{"start":1374,"end":1458},"start":{"line":44,"column":12},"end":{"line":44,"column":96}},"file":"src/identity/four_words_extensions.rs","lines":"            FourWordAddress::from_node_id(&node_id).expect(\"Should create address from node ID\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should create address from node ID\"","range":{"byteOffset":{"start":1421,"end":1457},"start":{"line":44,"column":59},"end":{"line":44,"column":95}}},"A":{"text":"FourWordAddress::from_node_id(&node_id)","range":{"byteOffset":{"start":1374,"end":1413},"start":{"line":44,"column":12},"end":{"line":44,"column":51}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_device_password(data, password).expect(\"Encryption should succeed\")","range":{"byteOffset":{"start":7893,"end":7973},"start":{"line":244,"column":12},"end":{"line":244,"column":92}},"file":"src/identity/encryption.rs","lines":"            encrypt_with_device_password(data, password).expect(\"Encryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"encrypt_with_device_password(data, password)","range":{"byteOffset":{"start":7893,"end":7937},"start":{"line":244,"column":12},"end":{"line":244,"column":56}}},"B":{"text":"\"Encryption should succeed\"","range":{"byteOffset":{"start":7945,"end":7972},"start":{"line":244,"column":64},"end":{"line":244,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"decrypt_with_device_password(&encrypted, password).expect(\"Decryption should succeed\")","range":{"byteOffset":{"start":8141,"end":8227},"start":{"line":251,"column":12},"end":{"line":251,"column":98}},"file":"src/identity/encryption.rs","lines":"            decrypt_with_device_password(&encrypted, password).expect(\"Decryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"decrypt_with_device_password(&encrypted, password)","range":{"byteOffset":{"start":8141,"end":8191},"start":{"line":251,"column":12},"end":{"line":251,"column":62}}},"B":{"text":"\"Decryption should succeed\"","range":{"byteOffset":{"start":8199,"end":8226},"start":{"line":251,"column":70},"end":{"line":251,"column":97}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_device_password(data, password).expect(\"Encryption should succeed\")","range":{"byteOffset":{"start":8492,"end":8572},"start":{"line":263,"column":12},"end":{"line":263,"column":92}},"file":"src/identity/encryption.rs","lines":"            encrypt_with_device_password(data, password).expect(\"Encryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"encrypt_with_device_password(data, password)","range":{"byteOffset":{"start":8492,"end":8536},"start":{"line":263,"column":12},"end":{"line":263,"column":56}}},"B":{"text":"\"Encryption should succeed\"","range":{"byteOffset":{"start":8544,"end":8571},"start":{"line":263,"column":64},"end":{"line":263,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"bincode::serialize(&encrypted).expect(\"Serialization should succeed\")","range":{"byteOffset":{"start":8621,"end":8690},"start":{"line":266,"column":25},"end":{"line":266,"column":94}},"file":"src/identity/encryption.rs","lines":"        let serialized = bincode::serialize(&encrypted).expect(\"Serialization should succeed\");","charCount":{"leading":25,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Serialization should succeed\"","range":{"byteOffset":{"start":8659,"end":8689},"start":{"line":266,"column":63},"end":{"line":266,"column":93}}},"A":{"text":"bincode::serialize(&encrypted)","range":{"byteOffset":{"start":8621,"end":8651},"start":{"line":266,"column":25},"end":{"line":266,"column":55}}}},"multi":{},"transformed":{}}}
{"text":"bincode::deserialize(&serialized).expect(\"Deserialization should succeed\")","range":{"byteOffset":{"start":8770,"end":8844},"start":{"line":270,"column":12},"end":{"line":270,"column":86}},"file":"src/identity/encryption.rs","lines":"            bincode::deserialize(&serialized).expect(\"Deserialization should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Deserialization should succeed\"","range":{"byteOffset":{"start":8811,"end":8843},"start":{"line":270,"column":53},"end":{"line":270,"column":85}}},"A":{"text":"bincode::deserialize(&serialized)","range":{"byteOffset":{"start":8770,"end":8803},"start":{"line":270,"column":12},"end":{"line":270,"column":45}}}},"multi":{},"transformed":{}}}
{"text":"decrypt_with_device_password(&deserialized, password)\n            .expect(\"Decryption should succeed\")","range":{"byteOffset":{"start":9143,"end":9245},"start":{"line":280,"column":24},"end":{"line":281,"column":48}},"file":"src/identity/encryption.rs","lines":"        let decrypted = decrypt_with_device_password(&deserialized, password)\n            .expect(\"Decryption should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Decryption should succeed\"","range":{"byteOffset":{"start":9217,"end":9244},"start":{"line":281,"column":20},"end":{"line":281,"column":47}}},"A":{"text":"decrypt_with_device_password(&deserialized, password)","range":{"byteOffset":{"start":9143,"end":9196},"start":{"line":280,"column":24},"end":{"line":280,"column":77}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_device_password(data, password).expect(\"Encryption should succeed\")","range":{"byteOffset":{"start":9538,"end":9618},"start":{"line":294,"column":12},"end":{"line":294,"column":92}},"file":"src/identity/encryption.rs","lines":"            encrypt_with_device_password(data, password).expect(\"Encryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"encrypt_with_device_password(data, password)","range":{"byteOffset":{"start":9538,"end":9582},"start":{"line":294,"column":12},"end":{"line":294,"column":56}}},"B":{"text":"\"Encryption should succeed\"","range":{"byteOffset":{"start":9590,"end":9617},"start":{"line":294,"column":64},"end":{"line":294,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_shared_secret(data, &shared_secret, info)\n            .expect(\"Encryption should succeed\")","range":{"byteOffset":{"start":10010,"end":10113},"start":{"line":309,"column":24},"end":{"line":310,"column":48}},"file":"src/identity/encryption.rs","lines":"        let encrypted = encrypt_with_shared_secret(data, &shared_secret, info)\n            .expect(\"Encryption should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Encryption should succeed\"","range":{"byteOffset":{"start":10085,"end":10112},"start":{"line":310,"column":20},"end":{"line":310,"column":47}}},"A":{"text":"encrypt_with_shared_secret(data, &shared_secret, info)","range":{"byteOffset":{"start":10010,"end":10064},"start":{"line":309,"column":24},"end":{"line":309,"column":78}}}},"multi":{},"transformed":{}}}
{"text":"decrypt_with_shared_secret(&encrypted, &shared_secret, info)\n            .expect(\"Decryption should succeed\")","range":{"byteOffset":{"start":10159,"end":10268},"start":{"line":313,"column":24},"end":{"line":314,"column":48}},"file":"src/identity/encryption.rs","lines":"        let decrypted = decrypt_with_shared_secret(&encrypted, &shared_secret, info)\n            .expect(\"Decryption should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Decryption should succeed\"","range":{"byteOffset":{"start":10240,"end":10267},"start":{"line":314,"column":20},"end":{"line":314,"column":47}}},"A":{"text":"decrypt_with_shared_secret(&encrypted, &shared_secret, info)","range":{"byteOffset":{"start":10159,"end":10219},"start":{"line":313,"column":24},"end":{"line":313,"column":84}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_shared_secret(data, &shared_secret, info1)\n            .expect(\"Encryption should succeed\")","range":{"byteOffset":{"start":10587,"end":10691},"start":{"line":327,"column":24},"end":{"line":328,"column":48}},"file":"src/identity/encryption.rs","lines":"        let encrypted = encrypt_with_shared_secret(data, &shared_secret, info1)\n            .expect(\"Encryption should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Encryption should succeed\"","range":{"byteOffset":{"start":10663,"end":10690},"start":{"line":328,"column":20},"end":{"line":328,"column":47}}},"A":{"text":"encrypt_with_shared_secret(data, &shared_secret, info1)","range":{"byteOffset":{"start":10587,"end":10642},"start":{"line":327,"column":24},"end":{"line":327,"column":79}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_device_password(data, password).expect(\"First encryption should succeed\")","range":{"byteOffset":{"start":11068,"end":11154},"start":{"line":343,"column":12},"end":{"line":343,"column":98}},"file":"src/identity/encryption.rs","lines":"            encrypt_with_device_password(data, password).expect(\"First encryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"First encryption should succeed\"","range":{"byteOffset":{"start":11120,"end":11153},"start":{"line":343,"column":64},"end":{"line":343,"column":97}}},"A":{"text":"encrypt_with_device_password(data, password)","range":{"byteOffset":{"start":11068,"end":11112},"start":{"line":343,"column":12},"end":{"line":343,"column":56}}}},"multi":{},"transformed":{}}}
{"text":"encrypt_with_device_password(data, password).expect(\"Second encryption should succeed\")","range":{"byteOffset":{"start":11193,"end":11280},"start":{"line":345,"column":12},"end":{"line":345,"column":99}},"file":"src/identity/encryption.rs","lines":"            encrypt_with_device_password(data, password).expect(\"Second encryption should succeed\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"encrypt_with_device_password(data, password)","range":{"byteOffset":{"start":11193,"end":11237},"start":{"line":345,"column":12},"end":{"line":345,"column":56}}},"B":{"text":"\"Second encryption should succeed\"","range":{"byteOffset":{"start":11245,"end":11279},"start":{"line":345,"column":64},"end":{"line":345,"column":98}}}},"multi":{},"transformed":{}}}
{"text":"crate::quantum_crypto::generate_ml_dsa_keypair()\n            .expect(\"ML-DSA key generation should succeed\")","range":{"byteOffset":{"start":11622,"end":11730},"start":{"line":350,"column":40},"end":{"line":351,"column":59}},"file":"src/identity/node_identity.rs","lines":"        let (public_key, _secret_key) = crate::quantum_crypto::generate_ml_dsa_keypair()\n            .expect(\"ML-DSA key generation should succeed\");","charCount":{"leading":40,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"ML-DSA key generation should succeed\"","range":{"byteOffset":{"start":11691,"end":11729},"start":{"line":351,"column":20},"end":{"line":351,"column":58}}},"A":{"text":"crate::quantum_crypto::generate_ml_dsa_keypair()","range":{"byteOffset":{"start":11622,"end":11670},"start":{"line":350,"column":40},"end":{"line":350,"column":88}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::generate().expect(\"Identity generation should succeed\")","range":{"byteOffset":{"start":12543,"end":12612},"start":{"line":383,"column":23},"end":{"line":383,"column":92}},"file":"src/identity/node_identity.rs","lines":"        let identity = NodeIdentity::generate().expect(\"Identity generation should succeed\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"NodeIdentity::generate()","range":{"byteOffset":{"start":12543,"end":12567},"start":{"line":383,"column":23},"end":{"line":383,"column":47}}},"B":{"text":"\"Identity generation should succeed\"","range":{"byteOffset":{"start":12575,"end":12611},"start":{"line":383,"column":55},"end":{"line":383,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::from_seed(&seed).expect(\"Identity from seed should succeed\")","range":{"byteOffset":{"start":13066,"end":13140},"start":{"line":397,"column":24},"end":{"line":397,"column":98}},"file":"src/identity/node_identity.rs","lines":"        let identity1 = NodeIdentity::from_seed(&seed).expect(\"Identity from seed should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Identity from seed should succeed\"","range":{"byteOffset":{"start":13104,"end":13139},"start":{"line":397,"column":62},"end":{"line":397,"column":97}}},"A":{"text":"NodeIdentity::from_seed(&seed)","range":{"byteOffset":{"start":13066,"end":13096},"start":{"line":397,"column":24},"end":{"line":397,"column":54}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::from_seed(&seed).expect(\"Identity from seed should succeed\")","range":{"byteOffset":{"start":13166,"end":13240},"start":{"line":398,"column":24},"end":{"line":398,"column":98}},"file":"src/identity/node_identity.rs","lines":"        let identity2 = NodeIdentity::from_seed(&seed).expect(\"Identity from seed should succeed\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"NodeIdentity::from_seed(&seed)","range":{"byteOffset":{"start":13166,"end":13196},"start":{"line":398,"column":24},"end":{"line":398,"column":54}}},"B":{"text":"\"Identity from seed should succeed\"","range":{"byteOffset":{"start":13204,"end":13239},"start":{"line":398,"column":62},"end":{"line":398,"column":97}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::generate().expect(\"Identity generation should succeed\")","range":{"byteOffset":{"start":13545,"end":13614},"start":{"line":410,"column":23},"end":{"line":410,"column":92}},"file":"src/identity/node_identity.rs","lines":"        let identity = NodeIdentity::generate().expect(\"Identity generation should succeed\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"NodeIdentity::generate()","range":{"byteOffset":{"start":13545,"end":13569},"start":{"line":410,"column":23},"end":{"line":410,"column":47}}},"B":{"text":"\"Identity generation should succeed\"","range":{"byteOffset":{"start":13577,"end":13613},"start":{"line":410,"column":55},"end":{"line":410,"column":91}}}},"multi":{},"transformed":{}}}
{"text":"NodeIdentity::import(&data).expect(\"Import should succeed with valid data\")","range":{"byteOffset":{"start":13715,"end":13790},"start":{"line":416,"column":23},"end":{"line":416,"column":98}},"file":"src/identity/node_identity.rs","lines":"        let imported = NodeIdentity::import(&data).expect(\"Import should succeed with valid data\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"NodeIdentity::import(&data)","range":{"byteOffset":{"start":13715,"end":13742},"start":{"line":416,"column":23},"end":{"line":416,"column":50}}},"B":{"text":"\"Import should succeed with valid data\"","range":{"byteOffset":{"start":13750,"end":13789},"start":{"line":416,"column":58},"end":{"line":416,"column":97}}}},"multi":{},"transformed":{}}}
{"text":"discovery\n            .discover()\n            .await\n            .expect(\"valid discovery operation\")","range":{"byteOffset":{"start":12035,"end":12136},"start":{"line":359,"column":24},"end":{"line":362,"column":48}},"file":"src/bootstrap/discovery.rs","lines":"        let addresses = discovery\n            .discover()\n            .await\n            .expect(\"valid discovery operation\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"discovery\n            .discover()\n            .await","range":{"byteOffset":{"start":12035,"end":12087},"start":{"line":359,"column":24},"end":{"line":361,"column":18}}},"B":{"text":"\"valid discovery operation\"","range":{"byteOffset":{"start":12108,"end":12135},"start":{"line":362,"column":20},"end":{"line":362,"column":47}}}},"multi":{},"transformed":{}}}
{"text":"engine\n            .find_nodes(&DhtKey::new(b\"init\"), 3)\n            .await\n            .expect(\"find_nodes should succeed\")","range":{"byteOffset":{"start":312,"end":436},"start":{"line":8,"column":22},"end":{"line":11,"column":48}},"file":"src/dht/core_engine_test.rs","lines":"        let closest = engine\n            .find_nodes(&DhtKey::new(b\"init\"), 3)\n            .await\n            .expect(\"find_nodes should succeed\");","charCount":{"leading":22,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"engine\n            .find_nodes(&DhtKey::new(b\"init\"), 3)\n            .await","range":{"byteOffset":{"start":312,"end":387},"start":{"line":8,"column":22},"end":{"line":10,"column":18}}},"B":{"text":"\"find_nodes should succeed\"","range":{"byteOffset":{"start":408,"end":435},"start":{"line":11,"column":20},"end":{"line":11,"column":47}}}},"multi":{},"transformed":{}}}
{"text":"Self::new_for_tests().expect(\"Failed to create test P2P node\")","range":{"byteOffset":{"start":952,"end":1014},"start":{"line":20,"column":8},"end":{"line":20,"column":70}},"file":"src/messaging/mocks.rs","lines":"        Self::new_for_tests().expect(\"Failed to create test P2P node\")","charCount":{"leading":8,"trailing":0},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to create test P2P node\"","range":{"byteOffset":{"start":981,"end":1013},"start":{"line":20,"column":37},"end":{"line":20,"column":69}}},"A":{"text":"Self::new_for_tests()","range":{"byteOffset":{"start":952,"end":973},"start":{"line":20,"column":8},"end":{"line":20,"column":29}}}},"multi":{},"transformed":{}}}
{"text":"generate_ml_dsa_keypair().expect(\"Failed to generate test keypair\")","range":{"byteOffset":{"start":21312,"end":21379},"start":{"line":627,"column":8},"end":{"line":627,"column":75}},"file":"src/security.rs","lines":"        generate_ml_dsa_keypair().expect(\"Failed to generate test keypair\")","charCount":{"leading":8,"trailing":0},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to generate test keypair\"","range":{"byteOffset":{"start":21345,"end":21378},"start":{"line":627,"column":41},"end":{"line":627,"column":74}}},"A":{"text":"generate_ml_dsa_keypair()","range":{"byteOffset":{"start":21312,"end":21337},"start":{"line":627,"column":8},"end":{"line":627,"column":33}}}},"multi":{},"transformed":{}}}
{"text":"generate_ml_dsa_keypair().expect(\"Failed to generate keypair\")","range":{"byteOffset":{"start":37828,"end":37890},"start":{"line":1089,"column":12},"end":{"line":1089,"column":74}},"file":"src/security.rs","lines":"            generate_ml_dsa_keypair().expect(\"Failed to generate keypair\");","charCount":{"leading":12,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to generate keypair\"","range":{"byteOffset":{"start":37861,"end":37889},"start":{"line":1089,"column":45},"end":{"line":1089,"column":73}}},"A":{"text":"generate_ml_dsa_keypair()","range":{"byteOffset":{"start":37828,"end":37853},"start":{"line":1089,"column":12},"end":{"line":1089,"column":37}}}},"multi":{},"transformed":{}}}
{"text":"ml_dsa_sign(&secret_key, message).expect(\"Failed to sign message\")","range":{"byteOffset":{"start":38090,"end":38156},"start":{"line":1095,"column":24},"end":{"line":1095,"column":90}},"file":"src/security.rs","lines":"        let signature = ml_dsa_sign(&secret_key, message).expect(\"Failed to sign message\");","charCount":{"leading":24,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Failed to sign message\"","range":{"byteOffset":{"start":38131,"end":38155},"start":{"line":1095,"column":65},"end":{"line":1095,"column":89}}},"A":{"text":"ml_dsa_sign(&secret_key, message)","range":{"byteOffset":{"start":38090,"end":38123},"start":{"line":1095,"column":24},"end":{"line":1095,"column":57}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"forest.lightning.compass\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity in test\")","range":{"byteOffset":{"start":43934,"end":44199},"start":{"line":1205,"column":23},"end":{"line":1213,"column":53}},"file":"src/identity/manager.rs","lines":"        let identity = manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"forest.lightning.compass\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity in test\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"forest.lightning.compass\".to_string(),\n                None,\n                None,\n            )\n            .await","range":{"byteOffset":{"start":43934,"end":44145},"start":{"line":1205,"column":23},"end":{"line":1212,"column":18}}},"B":{"text":"\"Should create identity in test\"","range":{"byteOffset":{"start":44166,"end":44198},"start":{"line":1213,"column":20},"end":{"line":1213,"column":52}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"ocean.thunder.falcon\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity for export test\")","range":{"byteOffset":{"start":44628,"end":44897},"start":{"line":1226,"column":32},"end":{"line":1234,"column":61}},"file":"src/identity/manager.rs","lines":"        let original_identity = manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"ocean.thunder.falcon\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity for export test\");","charCount":{"leading":32,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should create identity for export test\"","range":{"byteOffset":{"start":44856,"end":44896},"start":{"line":1234,"column":20},"end":{"line":1234,"column":60}}},"A":{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"ocean.thunder.falcon\".to_string(),\n                None,\n                None,\n            )\n            .await","range":{"byteOffset":{"start":44628,"end":44835},"start":{"line":1226,"column":32},"end":{"line":1233,"column":18}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .export_identity(&original_identity.user_id)\n            .await\n            .expect(\"Should export identity in test\")","range":{"byteOffset":{"start":44955,"end":45092},"start":{"line":1237,"column":28},"end":{"line":1240,"column":53}},"file":"src/identity/manager.rs","lines":"        let exported_data = manager\n            .export_identity(&original_identity.user_id)\n            .await\n            .expect(\"Should export identity in test\");","charCount":{"leading":28,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should export identity in test\"","range":{"byteOffset":{"start":45059,"end":45091},"start":{"line":1240,"column":20},"end":{"line":1240,"column":52}}},"A":{"text":"manager\n            .export_identity(&original_identity.user_id)\n            .await","range":{"byteOffset":{"start":44955,"end":45038},"start":{"line":1237,"column":28},"end":{"line":1239,"column":18}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .import_identity(&exported_data, \"password123\")\n            .await\n            .expect(\"Should import identity in test\")","range":{"byteOffset":{"start":45154,"end":45294},"start":{"line":1243,"column":32},"end":{"line":1246,"column":53}},"file":"src/identity/manager.rs","lines":"        let imported_identity = manager\n            .import_identity(&exported_data, \"password123\")\n            .await\n            .expect(\"Should import identity in test\");","charCount":{"leading":32,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should import identity in test\"","range":{"byteOffset":{"start":45261,"end":45293},"start":{"line":1246,"column":20},"end":{"line":1246,"column":52}}},"A":{"text":"manager\n            .import_identity(&exported_data, \"password123\")\n            .await","range":{"byteOffset":{"start":45154,"end":45240},"start":{"line":1243,"column":32},"end":{"line":1245,"column":18}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"test.user.example\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity for challenge test\")","range":{"byteOffset":{"start":45810,"end":46079},"start":{"line":1262,"column":23},"end":{"line":1270,"column":64}},"file":"src/identity/manager.rs","lines":"        let identity = manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"test.user.example\".to_string(),\n                None,\n                None,\n            )\n            .await\n            .expect(\"Should create identity for challenge test\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"A":{"text":"manager\n            .create_identity(\n                \"Test User\".to_string(),\n                \"test.user.example\".to_string(),\n                None,\n                None,\n            )\n            .await","range":{"byteOffset":{"start":45810,"end":46014},"start":{"line":1262,"column":23},"end":{"line":1269,"column":18}}},"B":{"text":"\"Should create identity for challenge test\"","range":{"byteOffset":{"start":46035,"end":46078},"start":{"line":1270,"column":20},"end":{"line":1270,"column":63}}}},"multi":{},"transformed":{}}}
{"text":"manager\n            .verify_challenge_response(&proof, &identity.public_key)\n            .await\n            .expect(\"Should verify challenge response in test\")","range":{"byteOffset":{"start":46602,"end":46761},"start":{"line":1285,"column":23},"end":{"line":1288,"column":63}},"file":"src/identity/manager.rs","lines":"        let is_valid = manager\n            .verify_challenge_response(&proof, &identity.public_key)\n            .await\n            .expect(\"Should verify challenge response in test\");","charCount":{"leading":23,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Should verify challenge response in test\"","range":{"byteOffset":{"start":46718,"end":46760},"start":{"line":1288,"column":20},"end":{"line":1288,"column":62}}},"A":{"text":"manager\n            .verify_challenge_response(&proof, &identity.public_key)\n            .await","range":{"byteOffset":{"start":46602,"end":46697},"start":{"line":1285,"column":23},"end":{"line":1287,"column":18}}}},"multi":{},"transformed":{}}}
{"text":"peer_info.expect(\"Peer info should exist after adding peer\")","range":{"byteOffset":{"start":75320,"end":75380},"start":{"line":2184,"column":19},"end":{"line":2184,"column":79}},"file":"src/network.rs","lines":"        let info = peer_info.expect(\"Peer info should exist after adding peer\");","charCount":{"leading":19,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Peer info should exist after adding peer\"","range":{"byteOffset":{"start":75337,"end":75379},"start":{"line":2184,"column":36},"end":{"line":2184,"column":78}}},"A":{"text":"peer_info","range":{"byteOffset":{"start":75320,"end":75329},"start":{"line":2184,"column":19},"end":{"line":2184,"column":28}}}},"multi":{},"transformed":{}}}
{"text":"event\n            .expect(\"Should receive event\")\n            .expect(\"Event should not be error\")","range":{"byteOffset":{"start":76272,"end":76370},"start":{"line":2211,"column":27},"end":{"line":2213,"column":48}},"file":"src/network.rs","lines":"        let event_result = event\n            .expect(\"Should receive event\")\n            .expect(\"Event should not be error\");","charCount":{"leading":27,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Event should not be error\"","range":{"byteOffset":{"start":76342,"end":76369},"start":{"line":2213,"column":20},"end":{"line":2213,"column":47}}},"A":{"text":"event\n            .expect(\"Should receive event\")","range":{"byteOffset":{"start":76272,"end":76321},"start":{"line":2211,"column":27},"end":{"line":2212,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"event\n            .expect(\"Should receive event\")","range":{"byteOffset":{"start":76272,"end":76321},"start":{"line":2211,"column":27},"end":{"line":2212,"column":43}},"file":"src/network.rs","lines":"        let event_result = event\n            .expect(\"Should receive event\")","charCount":{"leading":27,"trailing":0},"language":"Rust","metaVariables":{"single":{"A":{"text":"event","range":{"byteOffset":{"start":76272,"end":76277},"start":{"line":2211,"column":27},"end":{"line":2211,"column":32}}},"B":{"text":"\"Should receive event\"","range":{"byteOffset":{"start":76298,"end":76320},"start":{"line":2212,"column":20},"end":{"line":2212,"column":42}}}},"multi":{},"transformed":{}}}
{"text":"event\n            .expect(\"Should receive event\")\n            .expect(\"Event should not be error\")","range":{"byteOffset":{"start":76886,"end":76984},"start":{"line":2228,"column":27},"end":{"line":2230,"column":48}},"file":"src/network.rs","lines":"        let event_result = event\n            .expect(\"Should receive event\")\n            .expect(\"Event should not be error\");","charCount":{"leading":27,"trailing":1},"language":"Rust","metaVariables":{"single":{"B":{"text":"\"Event should not be error\"","range":{"byteOffset":{"start":76956,"end":76983},"start":{"line":2230,"column":20},"end":{"line":2230,"column":47}}},"A":{"text":"event\n            .expect(\"Should receive event\")","range":{"byteOffset":{"start":76886,"end":76935},"start":{"line":2228,"column":27},"end":{"line":2229,"column":43}}}},"multi":{},"transformed":{}}}
{"text":"event\n            .expect(\"Should receive event\")","range":{"byteOffset":{"start":76886,"end":76935},"start":{"line":2228,"column":27},"end":{"line":2229,"column":43}},"file":"src/network.rs","lines":"        let event_result = event\n            .expect(\"Should receive event\")","charCount":{"leading":27,"trailing":0},"language":"Rust","metaVariables":{"single":{"A":{"text":"event","range":{"byteOffset":{"start":76886,"end":76891},"start":{"line":2228,"column":27},"end":{"line":2228,"column":32}}},"B":{"text":"\"Should receive event\"","range":{"byteOffset":{"start":76912,"end":76934},"start":{"line":2229,"column":20},"end":{"line":2229,"column":42}}}},"multi":{},"transformed":{}}}
